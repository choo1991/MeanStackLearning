angular.module("app",["ngRoute"]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,e){e.fetch().success(function(e){t.posts=e}),t.addPost=function(){t.newBody&&e.create({username:"UserOne",body:t.newBody}).success(function(e){t.posts.unshift(e),t.newBody=null})}}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(e){return t.post("/api/posts/",e)}}]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(e,n){t.currentUser=n})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,e){t.login=function(n,o){e.login(n,o).then(function(e){t.$emit("login",e.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,e){e.fetch().success(function(e){t.posts=e}),t.addPost=function(){t.newBody&&e.create({username:"UserOne",body:t.newBody}).success(function(e){t.posts.unshift(e),t.newBody=null})}}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(e){return t.post("/api/posts/",e)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,e){t.register=function(t,e,n){}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var e=this;e.getUser=function(){return t.get("/api/users")},e.login=function(n,o){return t.post("/api/sessions",{username:n,password:o}).then(function(n){return e.token=n.data,t.defaults.headers.common["X-Auth"]=n.data,e.getUser()})},e.register=function(e,n,o){return t.post("/api/users",{email:e,username:n,password:o})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcC5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIlBvc3RzU3ZjIiwiZmV0Y2giLCJzdWNjZXNzIiwicG9zdHMiLCJhZGRQb3N0IiwibmV3Qm9keSIsImNyZWF0ZSIsInVzZXJuYW1lIiwiYm9keSIsInBvc3QiLCJ1bnNoaWZ0Iiwic2VydmljZSIsIiRodHRwIiwidGhpcyIsImdldCIsIiRvbiIsIl8iLCJ1c2VyIiwiY3VycmVudFVzZXIiLCJVc2VyU3ZjIiwibG9naW4iLCJwYXNzd29yZCIsInRoZW4iLCJyZXNwb25zZSIsIiRlbWl0IiwiZGF0YSIsInJlZ2lzdGVyIiwiZW1haWwiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsInN2YyIsImdldFVzZXIiLCJ2YWwiLCJ0b2tlbiIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiJdLCJtYXBwaW5ncyI6IkFBSUFBLFFBQUFDLE9BQUEsT0FDQSxZQ0NBRCxRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBQSxTQUFBLFdBQUEsU0FBQUMsRUFBQUMsR0FDQUEsRUFBQUMsUUFBQUMsUUFBQSxTQUFBQyxHQUNBSixFQUFBSSxNQUFBQSxJQUdBSixFQUFBSyxRQUFBLFdBQ0FMLEVBQUFNLFNBQ0FMLEVBQUFNLFFBQ0FDLFNBQUEsVUFDQUMsS0FBQVQsRUFBQU0sVUFDQUgsUUFBQSxTQUFBTyxHQUNBVixFQUFBSSxNQUFBTyxRQUFBRCxHQUNBVixFQUFBTSxRQUFBLFdBTUFULFFBQUFDLE9BQUEsT0FDQWMsUUFBQSxZQUFBLFFBQUEsU0FBQUMsR0FDQUMsS0FBQVosTUFBQSxXQUNBLE1BQUFXLEdBQUFFLElBQUEsZUFFQUQsS0FBQVAsT0FBQSxTQUFBRyxHQUNBLE1BQUFHLEdBQUFILEtBQUEsY0FBQUEsT0MvQkFiLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxtQkFBQSxTQUFBLFNBQUFDLEdBQ0FBLEVBQUFnQixJQUFBLFFBQUEsU0FBQUMsRUFBQUMsR0FDQWxCLEVBQUFtQixZQUFBRCxPQ0hBckIsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGFBQUEsU0FBQSxVQUFBLFNBQUFDLEVBQUFvQixHQUNBcEIsRUFBQXFCLE1BQUEsU0FBQWIsRUFBQWMsR0FDQUYsRUFBQUMsTUFBQWIsRUFBQWMsR0FDQUMsS0FBQSxTQUFBQyxHQUNBeEIsRUFBQXlCLE1BQUEsUUFBQUQsRUFBQUUsWUNBQTdCLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxhQUFBLFNBQUEsV0FBQSxTQUFBQyxFQUFBQyxHQUNBQSxFQUFBQyxRQUFBQyxRQUFBLFNBQUFDLEdBQ0FKLEVBQUFJLE1BQUFBLElBR0FKLEVBQUFLLFFBQUEsV0FDQUwsRUFBQU0sU0FDQUwsRUFBQU0sUUFDQUMsU0FBQSxVQUNBQyxLQUFBVCxFQUFBTSxVQUNBSCxRQUFBLFNBQUFPLEdBQ0FWLEVBQUFJLE1BQUFPLFFBQUFELEdBQ0FWLEVBQUFNLFFBQUEsV0NkQVQsUUFBQUMsT0FBQSxPQUNBYyxRQUFBLFlBQUEsUUFBQSxTQUFBQyxHQUNBQyxLQUFBWixNQUFBLFdBQ0EsTUFBQVcsR0FBQUUsSUFBQSxlQUVBRCxLQUFBUCxPQUFBLFNBQUFHLEdBQ0EsTUFBQUcsR0FBQUgsS0FBQSxjQUFBQSxPQ1ZBYixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsZ0JBQUEsU0FBQSxVQUFBLFNBQUFDLEVBQUFvQixHQUNBcEIsRUFBQTJCLFNBQUEsU0FBQUMsRUFBQXBCLEVBQUFjLFFDRkF6QixRQUFBQyxPQUFBLE9BQ0ErQixRQUFBLGlCQUFBLFNBQUFDLEdBQ0FBLEVBQ0FDLEtBQUEsS0FBQWhDLFdBQUEsWUFBQWlDLFlBQUEsZUFDQUQsS0FBQSxhQUFBaEMsV0FBQSxlQUFBaUMsWUFBQSxrQkFDQUQsS0FBQSxVQUFBaEMsV0FBQSxZQUFBaUMsWUFBQSxrQkNMQW5DLFFBQUFDLE9BQUEsT0FDQWMsUUFBQSxXQUFBLFFBQUEsU0FBQUMsR0FDQSxHQUFBb0IsR0FBQW5CLElBQ0FtQixHQUFBQyxRQUFBLFdBQ0EsTUFBQXJCLEdBQUFFLElBQUEsZUFFQWtCLEVBQUFaLE1BQUEsU0FBQWIsRUFBQWMsR0FDQSxNQUFBVCxHQUFBSCxLQUFBLGlCQUNBRixTQUFBQSxFQUNBYyxTQUFBQSxJQUNBQyxLQUFBLFNBQUFZLEdBR0EsTUFGQUYsR0FBQUcsTUFBQUQsRUFBQVQsS0FDQWIsRUFBQXdCLFNBQUFDLFFBQUFDLE9BQUEsVUFBQUosRUFBQVQsS0FDQU8sRUFBQUMsYUFHQUQsRUFBQU4sU0FBQSxTQUFBQyxFQUFBcEIsRUFBQWMsR0FDQSxNQUFBVCxHQUFBSCxLQUFBLGNBQ0FrQixNQUFBQSxFQUNBcEIsU0FBQUEsRUFDQWMsU0FBQUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogbW9kdWxlLmpzXG5TZXRzIGFuZ3VsYXIgbW9kdWxlLiBNdXN0IGJlIGNhbGxlZCBmaXJzdCBpbiBHdWxwLlxuKi9cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcblx0J25nUm91dGUnXG5dKTtcbiIsIi8qIGFwcC5qc1xuQW5ndWxhciBjb2RlIGJhY2tpbmcgdXAgdGhlIHBvc3RzIHBhZ2UuXG4qL1xuXG4vL3ZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJywgW10pO1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdQb3N0c0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBQb3N0c1N2Yykge1xuXHRQb3N0c1N2Yy5mZXRjaCgpLnN1Y2Nlc3MoZnVuY3Rpb24gKHBvc3RzKSB7XG5cdFx0JHNjb3BlLnBvc3RzID0gcG9zdHM7XG5cdH0pO1xuXG5cdCRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmICgkc2NvcGUubmV3Qm9keSkge1xuXHRcdFx0UG9zdHNTdmMuY3JlYXRlKHtcblx0XHRcdFx0dXNlcm5hbWU6ICdVc2VyT25lJyxcblx0XHRcdFx0Ym9keTogJHNjb3BlLm5ld0JvZHlcblx0XHRcdH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKHBvc3QpIHtcblx0XHRcdFx0JHNjb3BlLnBvc3RzLnVuc2hpZnQocG9zdCk7XG5cdFx0XHRcdCRzY29wZS5uZXdCb2R5ID0gbnVsbDtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1Bvc3RzU3ZjJywgZnVuY3Rpb24gKCRodHRwKSB7XG5cdHRoaXMuZmV0Y2ggPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cycpO1xuXHR9XG5cdHRoaXMuY3JlYXRlID0gZnVuY3Rpb24gKHBvc3QpIHtcblx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cy8nLCBwb3N0KTtcblx0fVxufSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlKSB7XG5cdCRzY29wZS4kb24oJ2xvZ2luJywgZnVuY3Rpb24gKF8sIHVzZXIpIHtcblx0XHQkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xuXHR9KTtcbn0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2Yykge1xuXHQkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG5cdFx0VXNlclN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG5cdFx0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdFx0XHQkc2NvcGUuJGVtaXQoJ2xvZ2luJywgcmVzcG9uc2UuZGF0YSk7XG5cdFx0fSk7XG5cdH1cbn0pO1xuIiwiLyogcG9zdHMuY3RybC5qc1xuQW5ndWxhciBjb2RlIGZvciBwb3N0IGNvbnRyb2xsZXIgdG8gYmUgZnVubmVsZWQgdmlhXG5HdWxwIGludG8gYXNzZXRzXG4qL1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdQb3N0c0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBQb3N0c1N2Yykge1xuXHRQb3N0c1N2Yy5mZXRjaCgpLnN1Y2Nlc3MoZnVuY3Rpb24gKHBvc3RzKSB7XG5cdFx0JHNjb3BlLnBvc3RzID0gcG9zdHM7XG5cdH0pO1xuXG5cdCRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmICgkc2NvcGUubmV3Qm9keSkge1xuXHRcdFx0UG9zdHNTdmMuY3JlYXRlKHtcblx0XHRcdFx0dXNlcm5hbWU6ICdVc2VyT25lJyxcblx0XHRcdFx0Ym9keTogJHNjb3BlLm5ld0JvZHlcblx0XHRcdH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKHBvc3QpIHtcblx0XHRcdFx0JHNjb3BlLnBvc3RzLnVuc2hpZnQocG9zdCk7XG5cdFx0XHRcdCRzY29wZS5uZXdCb2R5ID0gbnVsbDtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxufSk7XG4iLCIvKiBwb3N0cy5zdmMuanNcbkFuZ3VsYXIgY29kZSBmb3IgcG9zdCBzZXJ2aWNlLiBGdW5uZWxzIGludG8gYXNzZXRzIHZpYSBHdWxwXG4qL1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdQb3N0c1N2YycsIGZ1bmN0aW9uICgkaHR0cCkge1xuXHR0aGlzLmZldGNoID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnKTtcblx0fVxuXHR0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uIChwb3N0KSB7XG5cdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcG9zdHMvJywgcG9zdCk7XG5cdH1cbn0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2Yykge1xuXHQkc2NvcGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAoZW1haWwsIHVzZXJuYW1lLCBwYXNzd29yZCkge1xuXHRcdC8vVE9ETyBpbXBsZW1lbnQgcmVnaXN0ZXIgZnVuY3Rpb24gaW4gVXNlclN2Y1xuXHR9XG59KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbmZpZyhmdW5jdGlvbiAoJHJvdXRlUHJvdmlkZXIpIHtcblx0JHJvdXRlUHJvdmlkZXJcblx0LndoZW4oJy8nLCB7IGNvbnRyb2xsZXI6ICdQb3N0c0N0cmwnLCB0ZW1wbGF0ZVVybDogJ3Bvc3RzLmh0bWwnIH0pXG5cdC53aGVuKCcvcmVnaXN0ZXInLCB7IGNvbnRyb2xsZXI6ICdSZWdpc3RlckN0cmwnLCB0ZW1wbGF0ZVVybDogJ3JlZ2lzdGVyLmh0bWwnIH0pXG5cdC53aGVuKCcvbG9naW4nLCB7IGNvbnRyb2xsZXI6ICdMb2dpbkN0cmwnLCB0ZW1wbGF0ZVVybDogJ2xvZ2luLmh0bWwnIH0pO1xufSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdVc2VyU3ZjJywgZnVuY3Rpb24gKCRodHRwKSB7XG5cdHZhciBzdmMgPSB0aGlzO1xuXHRzdmMuZ2V0VXNlciA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJyk7XG5cdH1cblx0c3ZjLmxvZ2luID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJywge1xuXHRcdFx0dXNlcm5hbWU6IHVzZXJuYW1lLFxuXHRcdFx0cGFzc3dvcmQ6IHBhc3N3b3JkXG5cdFx0fSkudGhlbihmdW5jdGlvbiAodmFsKSB7XG5cdFx0XHRzdmMudG9rZW4gPSB2YWwuZGF0YTtcblx0XHRcdCRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IHZhbC5kYXRhO1xuXHRcdFx0cmV0dXJuIHN2Yy5nZXRVc2VyKCk7XG5cdFx0fSk7XG5cdH1cblx0c3ZjLnJlZ2lzdGVyID0gZnVuY3Rpb24gKGVtYWlsLCB1c2VybmFtZSwgcGFzc3dvcmQpIHtcblx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2VycycsIHtcblx0XHRcdGVtYWlsOiBlbWFpbCxcblx0XHRcdHVzZXJuYW1lOiB1c2VybmFtZSxcblx0XHRcdHBhc3N3b3JkOiBwYXNzd29yZFxuXHRcdH0pO1xuXHR9XG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
