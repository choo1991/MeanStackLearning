angular.module("app",["ngRoute"]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,e){e.fetch().success(function(e){t.posts=e}),t.addPost=function(){t.newBody&&e.create({username:"UserOne",body:t.newBody}).success(function(e){t.posts.unshift(e),t.newBody=null})}}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(e){return t.post("/api/posts/",e)}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,e){t.login=function(t,n){e.login(t,n).then(function(t){console.log(t)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,e){e.fetch().success(function(e){t.posts=e}),t.addPost=function(){t.newBody&&e.create({username:"UserOne",body:t.newBody}).success(function(e){t.posts.unshift(e),t.newBody=null})}}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(e){return t.post("/api/posts/",e)}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var e=this;e.getUser=function(){return t.get("/api/users",{headers:{"X-Auth":this.token}})},e.login=function(n,o){return t.post("/api/sessions",{username:n,password:o}).then(function(t){return e.token=t.data,e.getUser()})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcC5qcyIsImxvZ2luLmN0cmwuanMiLCJwb3N0cy5jdHJsLmpzIiwicG9zdHMuc3ZjLmpzIiwicm91dGVzLmpzIiwidXNlci5zdmMuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCJQb3N0c1N2YyIsImZldGNoIiwic3VjY2VzcyIsInBvc3RzIiwiYWRkUG9zdCIsIm5ld0JvZHkiLCJjcmVhdGUiLCJ1c2VybmFtZSIsImJvZHkiLCJwb3N0IiwidW5zaGlmdCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJVc2VyU3ZjIiwibG9naW4iLCJwYXNzd29yZCIsInRoZW4iLCJ1c2VyIiwiY29uc29sZSIsImxvZyIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwic3ZjIiwiZ2V0VXNlciIsImhlYWRlcnMiLCJYLUF1dGgiLCJ0b2tlbiIsInZhbCIsImRhdGEiXSwibWFwcGluZ3MiOiJBQUlBQSxRQUFBQyxPQUFBLE9BQ0EsWUNDQUQsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGFBQUEsU0FBQSxXQUFBLFNBQUFDLEVBQUFDLEdBQ0FBLEVBQUFDLFFBQUFDLFFBQUEsU0FBQUMsR0FDQUosRUFBQUksTUFBQUEsSUFHQUosRUFBQUssUUFBQSxXQUNBTCxFQUFBTSxTQUNBTCxFQUFBTSxRQUNBQyxTQUFBLFVBQ0FDLEtBQUFULEVBQUFNLFVBQ0FILFFBQUEsU0FBQU8sR0FDQVYsRUFBQUksTUFBQU8sUUFBQUQsR0FDQVYsRUFBQU0sUUFBQSxXQU1BVCxRQUFBQyxPQUFBLE9BQ0FjLFFBQUEsWUFBQSxRQUFBLFNBQUFDLEdBQ0FDLEtBQUFaLE1BQUEsV0FDQSxNQUFBVyxHQUFBRSxJQUFBLGVBRUFELEtBQUFQLE9BQUEsU0FBQUcsR0FDQSxNQUFBRyxHQUFBSCxLQUFBLGNBQUFBLE9DL0JBYixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBQSxTQUFBLFVBQUEsU0FBQUMsRUFBQWdCLEdBQ0FoQixFQUFBaUIsTUFBQSxTQUFBVCxFQUFBVSxHQUNBRixFQUFBQyxNQUFBVCxFQUFBVSxHQUNBQyxLQUFBLFNBQUFDLEdBQ0FDLFFBQUFDLElBQUFGLFNDQUF2QixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBQSxTQUFBLFdBQUEsU0FBQUMsRUFBQUMsR0FDQUEsRUFBQUMsUUFBQUMsUUFBQSxTQUFBQyxHQUNBSixFQUFBSSxNQUFBQSxJQUdBSixFQUFBSyxRQUFBLFdBQ0FMLEVBQUFNLFNBQ0FMLEVBQUFNLFFBQ0FDLFNBQUEsVUFDQUMsS0FBQVQsRUFBQU0sVUFDQUgsUUFBQSxTQUFBTyxHQUNBVixFQUFBSSxNQUFBTyxRQUFBRCxHQUNBVixFQUFBTSxRQUFBLFdDZEFULFFBQUFDLE9BQUEsT0FDQWMsUUFBQSxZQUFBLFFBQUEsU0FBQUMsR0FDQUMsS0FBQVosTUFBQSxXQUNBLE1BQUFXLEdBQUFFLElBQUEsZUFFQUQsS0FBQVAsT0FBQSxTQUFBRyxHQUNBLE1BQUFHLEdBQUFILEtBQUEsY0FBQUEsT0NWQWIsUUFBQUMsT0FBQSxPQUNBeUIsUUFBQSxpQkFBQSxTQUFBQyxHQUNBQSxFQUNBQyxLQUFBLEtBQUExQixXQUFBLFlBQUEyQixZQUFBLGVBQ0FELEtBQUEsYUFBQTFCLFdBQUEsZUFBQTJCLFlBQUEsa0JBQ0FELEtBQUEsVUFBQTFCLFdBQUEsWUFBQTJCLFlBQUEsa0JDTEE3QixRQUFBQyxPQUFBLE9BQ0FjLFFBQUEsV0FBQSxRQUFBLFNBQUFDLEdBQ0EsR0FBQWMsR0FBQWIsSUFDQWEsR0FBQUMsUUFBQSxXQUNBLE1BQUFmLEdBQUFFLElBQUEsY0FDQWMsU0FBQUMsU0FBQWhCLEtBQUFpQixVQUdBSixFQUFBVixNQUFBLFNBQUFULEVBQUFVLEdBQ0EsTUFBQUwsR0FBQUgsS0FBQSxpQkFDQUYsU0FBQUEsRUFDQVUsU0FBQUEsSUFDQUMsS0FBQSxTQUFBYSxHQUVBLE1BREFMLEdBQUFJLE1BQUFDLEVBQUFDLEtBQ0FOLEVBQUFDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIG1vZHVsZS5qc1xuU2V0cyBhbmd1bGFyIG1vZHVsZS4gTXVzdCBiZSBjYWxsZWQgZmlyc3QgaW4gR3VscC5cbiovXG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXG5cdCduZ1JvdXRlJ1xuXSk7XG4iLCIvKiBhcHAuanNcbkFuZ3VsYXIgY29kZSBiYWNraW5nIHVwIHRoZSBwb3N0cyBwYWdlLlxuKi9cblxuLy92YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtdKTtcblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignUG9zdHNDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgUG9zdHNTdmMpIHtcblx0UG9zdHNTdmMuZmV0Y2goKS5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0cykge1xuXHRcdCRzY29wZS5wb3N0cyA9IHBvc3RzO1xuXHR9KTtcblxuXHQkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uICgpIHtcblx0XHRpZiAoJHNjb3BlLm5ld0JvZHkpIHtcblx0XHRcdFBvc3RzU3ZjLmNyZWF0ZSh7XG5cdFx0XHRcdHVzZXJuYW1lOiAnVXNlck9uZScsXG5cdFx0XHRcdGJvZHk6ICRzY29wZS5uZXdCb2R5XG5cdFx0XHR9KS5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0KSB7XG5cdFx0XHRcdCRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpO1xuXHRcdFx0XHQkc2NvcGUubmV3Qm9keSA9IG51bGw7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdQb3N0c1N2YycsIGZ1bmN0aW9uICgkaHR0cCkge1xuXHR0aGlzLmZldGNoID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnKTtcblx0fVxuXHR0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uIChwb3N0KSB7XG5cdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcG9zdHMvJywgcG9zdCk7XG5cdH1cbn0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2Yykge1xuXHQkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG5cdFx0VXNlclN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG5cdFx0LnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcblx0XHRcdGNvbnNvbGUubG9nKHVzZXIpO1xuXHRcdH0pO1xuXHR9XG59KTtcbiIsIi8qIHBvc3RzLmN0cmwuanNcbkFuZ3VsYXIgY29kZSBmb3IgcG9zdCBjb250cm9sbGVyIHRvIGJlIGZ1bm5lbGVkIHZpYVxuR3VscCBpbnRvIGFzc2V0c1xuKi9cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignUG9zdHNDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgUG9zdHNTdmMpIHtcblx0UG9zdHNTdmMuZmV0Y2goKS5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0cykge1xuXHRcdCRzY29wZS5wb3N0cyA9IHBvc3RzO1xuXHR9KTtcblxuXHQkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uICgpIHtcblx0XHRpZiAoJHNjb3BlLm5ld0JvZHkpIHtcblx0XHRcdFBvc3RzU3ZjLmNyZWF0ZSh7XG5cdFx0XHRcdHVzZXJuYW1lOiAnVXNlck9uZScsXG5cdFx0XHRcdGJvZHk6ICRzY29wZS5uZXdCb2R5XG5cdFx0XHR9KS5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0KSB7XG5cdFx0XHRcdCRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpO1xuXHRcdFx0XHQkc2NvcGUubmV3Qm9keSA9IG51bGw7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cbn0pO1xuIiwiLyogcG9zdHMuc3ZjLmpzXG5Bbmd1bGFyIGNvZGUgZm9yIHBvc3Qgc2VydmljZS4gRnVubmVscyBpbnRvIGFzc2V0cyB2aWEgR3VscFxuKi9cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnUG9zdHNTdmMnLCBmdW5jdGlvbiAoJGh0dHApIHtcblx0dGhpcy5mZXRjaCA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJyk7XG5cdH1cblx0dGhpcy5jcmVhdGUgPSBmdW5jdGlvbiAocG9zdCkge1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzLycsIHBvc3QpO1xuXHR9XG59KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbmZpZyhmdW5jdGlvbiAoJHJvdXRlUHJvdmlkZXIpIHtcblx0JHJvdXRlUHJvdmlkZXJcblx0LndoZW4oJy8nLCB7IGNvbnRyb2xsZXI6ICdQb3N0c0N0cmwnLCB0ZW1wbGF0ZVVybDogJ3Bvc3RzLmh0bWwnIH0pXG5cdC53aGVuKCcvcmVnaXN0ZXInLCB7IGNvbnRyb2xsZXI6ICdSZWdpc3RlckN0cmwnLCB0ZW1wbGF0ZVVybDogJ3JlZ2lzdGVyLmh0bWwnIH0pXG5cdC53aGVuKCcvbG9naW4nLCB7IGNvbnRyb2xsZXI6ICdMb2dpbkN0cmwnLCB0ZW1wbGF0ZVVybDogJ2xvZ2luLmh0bWwnIH0pO1xufSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdVc2VyU3ZjJywgZnVuY3Rpb24gKCRodHRwKSB7XG5cdHZhciBzdmMgPSB0aGlzO1xuXHRzdmMuZ2V0VXNlciA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJywge1xuXHRcdFx0aGVhZGVyczogeyAnWC1BdXRoJzogdGhpcy50b2tlbiB9XG5cdFx0fSk7XG5cdH1cblx0c3ZjLmxvZ2luID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJywge1xuXHRcdFx0dXNlcm5hbWU6IHVzZXJuYW1lLFxuXHRcdFx0cGFzc3dvcmQ6IHBhc3N3b3JkXG5cdFx0fSkudGhlbihmdW5jdGlvbiAodmFsKSB7XG5cdFx0XHRzdmMudG9rZW4gPSB2YWwuZGF0YTtcblx0XHRcdHJldHVybiBzdmMuZ2V0VXNlcigpO1xuXHRcdH0pO1xuXHR9XG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
